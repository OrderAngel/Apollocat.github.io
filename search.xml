<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客简介</title>
    <url>/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Hi, guys！</p>
<p>这里是 阿波罗猫 的博客——四界。</p>
<p>主要作用是记录个人生活，整理所学知识，放飞自我， 天天向上！</p>
<p>这里先许下一个心愿：<strong>希望未来能顺利毕业！</strong></p>
<span id="more"></span>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><table>
<thead>
<tr>
<th align="center"><strong>侧栏名称</strong></th>
<th align="center"><strong>简介</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>主页</strong></td>
<td align="center">博客主页</td>
</tr>
<tr>
<td align="center"><strong>归档</strong></td>
<td align="center">罗列所有文章</td>
</tr>
<tr>
<td align="center"><strong>分类</strong></td>
<td align="center">按类型分类文章</td>
</tr>
<tr>
<td align="center"><strong>标签</strong></td>
<td align="center">按标签分类文章</td>
</tr>
<tr>
<td align="center"><strong>随笔</strong></td>
<td align="center">日常相关的吐槽</td>
</tr>
<tr>
<td align="center"><strong>关于我</strong></td>
<td align="center">个人简历</td>
</tr>
</tbody></table>
<h1 id="关于“四界”"><a href="#关于“四界”" class="headerlink" title="关于“四界”"></a>关于“四界”</h1><p>“四界”这个名字来自于我初高中时的自产小说，小说内容就不说了，满满都是中二，而且还坑了2333。</p>
<p>Anyway，这个博客名字可以理解为致敬青春吧。</p>
<p>祝愿我的未来无论走出多远，归来仍是少年。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github博客搭建教程</title>
    <url>/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新手小白，第一次搭博客，先向前辈们大佬们隔空致敬。</p>
<p>搭建博客有很多种方法，我选择的是Hexo静态博客框架，利用Github Page服务器，比较节省时间和金钱，可以更加专注于内容本身。</p>
<span id="more"></span>

<p>首先附上参考链接：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">概述</td>
<td align="left">1. <a href="https://zoomyale.com/2016/why_blogging/">为什么要在老掉牙的独立博客上写东西</a></td>
</tr>
<tr>
<td align="center">参考教程</td>
<td align="left">1. <a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程-韦阳</a><br>2. <a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎</a><br>3. <a href="https://www.cnblogs.com/shwee/p/11421156.html">Hexo+Github: 个人博客网站搭建完全教程- 博客园</a><br>4. <a href="https://segmentfault.com/a/1190000021979631">超级详细Hexo+GitHub+阿里云域名的博客搭建教程，新手也能轻松学会</a><br>5. <a href="https://www.cnblogs.com/shwee/p/11421156.html">Hexo+Github: 个人博客网站搭建完全教程</a><br>6. <a href="https://winney07.github.io/2018/08/02/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/">在Hexo博客中发布文章</a></td>
</tr>
<tr>
<td align="center">个性化</td>
<td align="left">1. <a href="https://shen-yu.gitee.io/2019/ayer/">Ayer主题</a><br>2. <a href="https://yuchen-lea.github.io/2016-01-18-hexo-dir-struct/">hexo目录结构小探</a></td>
</tr>
<tr>
<td align="center">写作</td>
<td align="left">1. <a href="http://itmyhome.com/markdown/index.html">Markdown 入门参考</a><br>2. <a href="https://zhuanlan.zhihu.com/p/56943330">使用vscode开始Markdown写作之旅 - 知乎</a><br>3. <a href="https://hexo.io/zh-cn/docs/">Hexo-文档</a></td>
</tr>
<tr>
<td align="center">图床</td>
<td align="left">1. <a href="https://www.jianshu.com/p/bff6638e450f">图床工具推荐</a><br>2. <a href="https://sunhwee.com/posts/1788dd4a.html">PicGo+GitHub：你的最佳免费图床选择-洪卫</a></td>
</tr>
</tbody></table>
<h1 id="搭建博客框架"><a href="#搭建博客框架" class="headerlink" title="搭建博客框架"></a>搭建博客框架</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo基于Node.js，首先要下载<a href="https://nodejs.org/en/download/">Node.js安装包</a>（建议选LTS版本，current版本或许无法安装一些插件），改一下安装路径，其他安装选项选择默认就行。</p>
<p>安装完成后，<code>win+R</code>打开命令行，输入<code>node -v</code>和<code>npm -v</code>，显示版本号则安装成功。</p>
<h2 id="添加镜像"><a href="#添加镜像" class="headerlink" title="添加镜像"></a>添加镜像</h2><p>如果没有梯子，npm部分可以用阿里国内镜像加速。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>为了将本地网页文件上传到Github上，需要安装分布式版本控制工具<a href="https://git-scm.com/download/win">Git</a>。</p>
<p>有兴趣深入了解Git的话，可以参考廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a></p>
<p>安装完成后在命令行输入git –version验证是否安装成功。</p>
<h2 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h2><p>每个程序猿都该有个Github啦，毕竟这就是猿的浪漫了~如果没有也没有关系，你可以从现在开始拥有这份独特的浪漫。</p>
<ol>
<li><p>注册一个<a href="https://github.com/">Github</a>账号，强烈建议名字正常一点。</p>
</li>
<li><p>新建一个仓库：</p>
<div align="center">
<img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github-Picbed20210415174145.png" width="300/">
</div></li>
<li><p>仓库基本配置如下：</p>
<p>这里要注意的是：仓库的命名一定要跟用户名一样！</p>
<div align="center">
<img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github-Picbed20210415222443.png">
</div></li>
<li><p>在新建好的仓库界面选择<code>setting</code>–<code>Pages</code>–<code>Choose a theme</code>，这里的主题可以随便选一个，后期可以换成别的。</p>
</li>
<li><p>刷新一下，<code>Pages</code>界面会出现你自己的网页链接，比如：<code>Your site is ready to be published at http://OrderAngel.com/OrderAngel.github.io</code></p>
<p>虽然简陋，但是这就是你的博客啦~</p>
</li>
</ol>
<h2 id="安装Hexo，生成静态框架"><a href="#安装Hexo，生成静态框架" class="headerlink" title="安装Hexo，生成静态框架"></a>安装Hexo，生成静态框架</h2><p>Hexo是一款基于Node.js的静态博客框架，生成的静态网页可以借助Github服务器发布。</p>
<ol>
<li><p>在合适的地方（这里说的一定不是C盘!）新建一个文件夹,用于存放博客文件，比如<code>E:\Study\Apollocat\blog</code>。</p>
</li>
<li><p>在该目录下右键，点击<code>Git Bash Here</code>，如果右键没有就直接搜Git bash，<code>cd</code>过去也行。</p>
</li>
<li><p>在该目录下输入<code>npm i hexo-cli -g</code>安装Hexo，或许有报错，直接无视就行。</p>
</li>
<li><p>安装完输入<code>hexo v</code>出现版本号则安装成功。</p>
</li>
<li><p>输入<code>hexo init</code>初始化文件夹，接着输入<code>nmp install</code>安装必要组件。</p>
</li>
<li><p>为了检测网站雏形，输入<code>hexo new "hello world"</code>新建文章。打开<code>E:\Study\Apollocat\blog\source\_posts</code>目录，可以看到一个<code>hello world.md</code>，这就是你新建的文章文件。</p>
</li>
<li><p>输入<code>hexo g</code>生成静态网页，再输入<code>hexo s</code>打开本地服务器。（Actually, 不生成静态网页，直接输入<code>hexo s</code>进行预览测试也可以）</p>
<p>这时用浏览器打开<code>localhost:4000</code>就能看到你的第一篇博客了，即便它只有一个标题，且只是静态的。</p>
<p>最后<code>ctrl+c</code>关闭本地服务器。</p>
</li>
</ol>
<h2 id="链接Github与本地Git"><a href="#链接Github与本地Git" class="headerlink" title="链接Github与本地Git"></a>链接Github与本地Git</h2><p>我们的网站在本地搭建完毕，如果想要发布到Github上就需要用到Git了。前面我们已经在本地安装Git了，现在需要将你的本地Git与Github链接，该步骤我们通过设置ssh秘钥来完成。</p>
<ol>
<li><p>鼠标右键打开Git Bash，设置本地Git的用户名和邮箱，注意要与Github相同，别输错了：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name "GitHub用户名"</span><br><span class="line">git config --global user.email "GitHub注册邮箱"</span><br></pre></td></tr></tbody></table></figure>
<p>可以用以下两条命令，检查一下你有没有输对:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>生成ssh秘钥：</p>
<p>ssh简单而言是一个秘钥，<code>id_rsa</code>是本地电脑的私人秘钥，<code>id_rsa.pub</code>是公共秘钥。公钥放在Github上，当链接本地与Github时，会根据公钥匹配私钥，匹配上则成功链接，之后可以用Git上传本地文件到Github上。</p>
<p>为啥需要设置ssh秘钥？由于Github要求每次上传文件的都是合法用户，因此每次上传都需要输入账号和密码来进行验证。这里设置ssh秘钥就是为了省去手动验证的步骤，上传时由Git自行匹配私钥与公钥完成验证。</p>
<p>输入命令生成ssh秘钥：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "GitHub注册邮箱"</span><br></pre></td></tr></tbody></table></figure>
<p>直接回车，默认不设密码。</p>
</li>
<li><p>找到生成的.ssh文件夹中的id_rsa.pub秘钥，复制全部内容。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github-Picbed20210416095437.png"><br>回到Github，打开<code>Settings</code>（是头像处的settings）– <code>SSH and GPG Keys</code> – <code>New SSH Key</code>：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github-Picbed20210416101521.png"></p>
<p>Title随便写，Key部分将刚才复制的id_rsa.pub秘钥粘进去，最后点<code>Add SHH Key</code>。</p>
</li>
<li><p>在本地的Git Bash里检测Github公钥是否成功设置，输入<code>ssh git@github.com</code>，如果输出部分出现你的用户名，则设置成功。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github-Picbed20210416102021.png"></p>
</li>
</ol>
<h2 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h2><p>此时我们的网站已经在本地搭好了，而且本地Git也和Github成功链接，接下来要做的就是把本地搭的网站发布出去，让网站可以被其他人访问。</p>
<ol>
<li><p>打开本地blog根目录下的站点配置文件_config.yml，该文件用于配置博客的基本信息。</p>
<p>需要注意的是，theme文件夹中有个同名文件，我们称之为主题配置文件，用于配置博客的主题信息。</p>
</li>
<li><p>修改站点配置文件_config.yml的最后一行配置并保存：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210416105511.png"></p>
<p>这里的<code>repository</code>可以简写为<code>repo</code>，是你Github上创建的博客仓库的路径。</p>
<p><strong>注意</strong>：这里的branch可以设置为main或者master，但务必与Github仓库中<code>Settings</code>–<code>Pages</code>–<code>Source</code>–<code>Branch</code>相匹配，否则即使上传成功也看不到你的网站。</p>
<p>修改deploy其实是在给网站部署命令<code>hexo d</code>做相应配置，使用该命令进行部署时，hexo就能知道要把blog部署到Github的博客仓库中。</p>
</li>
<li><p>安装Git部署插件：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>分别输入以下三条命令：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">//清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br><span class="line">hexo g <span class="comment">//生成静态网页</span></span><br><span class="line">hexo d <span class="comment">//部署</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后打开浏览器，输入部分博客仓库路径<code>OrderAngel.github.io</code>，就能看到你发布的博客了。</p>
</li>
</ol>
<h1 id="优化博客框架"><a href="#优化博客框架" class="headerlink" title="优化博客框架"></a>优化博客框架</h1><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>如果嫌弃<code>balabala.github.io</code>这种统一标识的域名，可以绑定自己的个性化域名。</p>
<ol>
<li><p>没有域名的话要先买个域名，百度云阿里云腾讯云之类的都能买，我个人用的是<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云</a>。</p>
<p>登陆后进入右上角的<code>控制台</code>，点<code>产品与服务</code> – <code>域名</code> –<code>域名注册</code>。</p>
<p>把喜欢的域名买下来吧~</p>
</li>
<li><p>解析域名：在域名控制台界面下，点击<code>解析</code>。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418093157.png"></p>
<p>在解析设置界面，点击<code>添加记录</code>，添加两条记录：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418093651.png"></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418093743.png"></p>
<p>记录值这里是：<code>用户名.github.io</code>这个现在可以直接访问的部分仓库路径。</p>
</li>
<li><p>回到你的Github博客仓库中，选择<code>Settings</code> – <code>Pages</code>，在<code>Custom domain</code>这里， 输入你购买的域名后保存。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418094423.png"></p>
<p>这里的<code>www.</code>输不输都行。</p>
</li>
<li><p>在本地blog文件夹中，blog/source目录下，创建一个记事本文件，输入你购买的域名。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418095345.png"></p>
<p>这里的域名建议不带<code>www.</code>，如果带上以后必须有完整的<code>www.balabala..</code>才能访问，如果不带，以后域名有没有<code>www.</code>都能访问。</p>
<p>文件命名为<code>CNAME</code>，保存类型为<code>所有文件(*.*)</code>。</p>
</li>
<li><p>最后，将我们改动的配置同步到Github中就行了：在本地blog目录下，进入Git Bash命令行(cmd和powershell也行)，输入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>

<p>现在，打开浏览器输入你自己的域名，就可以直接进入你的博客了~</p>
</li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>之前随便选的Hexo主题或许不合心意，但不用care，因为我们还可以更换其他主题。</p>
<p>可以在<a href="https://hexo.io/themes/">Theme</a>中Pick心水的主题。我个人用的是<a href="https://shen-yu.gitee.io/">Ayer</a>，这位博主的写的主题配置教程很nice。其他常用的，比如Next主题，也很棒。</p>
<ol>
<li>如果Theme的博主有相关教程，按说明进行安装配置；如果没有的话，先去Github里下载下来，放在本地的<code>blog\themes</code>目录下：<img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418105207.png"></li>
</ol>
<ol start="2">
<li><p>在本地blog目录下，打开站点配置文件<code>_config.yml</code>，修改theme为你选的主题名，比如ayer。这里注意要与<code>blog\themes</code>目录下该主题命名相同。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418105658.png"></p>
</li>
<li><p>一般关于该主题的使用教程会在Theme博主的Blog里给出；如果没有的话，搜下有无相关教程，或者自行研究一下本地<code>blog\themes\主题名</code>目录下的主题配置文件<code>_config.yml</code>，主题相关的主要配置都在该文件中。</p>
<p>关于主题文件夹的目录说明，可以参考<a href="https://hexo.io/zh-cn/docs/themes.html">主题hexo</a>。</p>
</li>
<li><p>最后，再次部署网站，还是：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">hexo s <span class="comment">//本地预览测试：可以先打开本地服务器，在localhost:4000中看看效果</span></span><br><span class="line">hexo clean <span class="comment">//清除缓存</span></span><br><span class="line">hexo g <span class="comment">//生成</span></span><br><span class="line">hexo d <span class="comment">//部署</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="hexo私人定制"><a href="#hexo私人定制" class="headerlink" title="hexo私人定制"></a>hexo私人定制</h2><p>工欲善其事，必先利其器。在进行一些更高级的私人配置前，我们有必要先了解一下blog文件夹里的文件都是用来干啥的。</p>
<h3 id="hexo目录说明"><a href="#hexo目录说明" class="headerlink" title="hexo目录说明"></a>hexo目录说明</h3><p>这是我blog文件夹下的目录，由于使用了一段时间，因此也有些私设，请大致参考。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">|──_config.yml</span><br><span class="line">|──package.json</span><br><span class="line">|──.deploy_git</span><br><span class="line">|──node_modules</span><br><span class="line">|──public</span><br><span class="line">|──scaffolds</span><br><span class="line">|──source</span><br><span class="line">      |──_posts</span><br><span class="line">      |──categories</span><br><span class="line">      |──pictures</span><br><span class="line">      |──tags</span><br><span class="line">|──themes</span><br><span class="line">      |──landscape</span><br><span class="line">      |──ayer</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-config-yml"><a href="#1-config-yml" class="headerlink" title="1. _config.yml"></a>1. _config.yml</h4><p>   站点配置文件，初始化时自动创建。</p>
<p>   具体配置可参考<a href="https://hexo.io/zh-cn/docs/configuration.html">配置hexo</a></p>
<h4 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2. package.json"></a>2. package.json</h4><p>   应用程序文件，初始化时自动创建。</p>
<p>   可以查看hexo版本以及安装的扩展版本。</p>
<h4 id="3-deploy-git"><a href="#3-deploy-git" class="headerlink" title="3. .deploy_git"></a>3. .deploy_git</h4><p>   对应Github博客仓库中的内容 = 最近一次成功上传到Github上的public文件夹内容。在部署到Github后自动创建。</p>
<p>   可能出现的与public内容不一致，是由于重新生成但未上传所致。简而言之，public是<code>hexo g</code>生成静态页面的内容，而.deploy_git中是<code>hexo d</code>部署到Github中的内容。</p>
<h4 id="4-node-modules"><a href="#4-node-modules" class="headerlink" title="4. node_modules"></a>4. node_modules</h4><p>   存放安装的Hexo扩展，还有node .js的各种库。</p>
<h4 id="5-public"><a href="#5-public" class="headerlink" title="5. public"></a>5. public</h4><p>   执行<code>hexo g</code>命令后，Hexo会解析source文件夹和当前的Theme，从而生成静态网页，该内容存放于public文件夹中。</p>
<h4 id="6-scaffolds"><a href="#6-scaffolds" class="headerlink" title="6. scaffolds"></a>6. scaffolds</h4><p>   模板文件夹。<br>   内有页面模板<code>page.md</code>、文章模板<code>post.md</code>、草稿模板<code>draft.md</code>三个文件。<br>   具体可参考<a href="https://hexo.io/zh-cn/docs/templates.html">模板hexo</a>。</p>
<h4 id="7-source"><a href="#7-source" class="headerlink" title="7. source"></a>7. source</h4><p>   存放用户资源。</p>
<ol>
<li><p>_post</p>
<p>存放文章。<br>其中markdown文件(md)、html文件、org文件在<code>hexo g</code>生成页面过程中会被解析并拷贝到public文件夹中，最终通过<code>hexo d</code>发布。</p>
</li>
<li><p>其他_balabala文件夹/文件</p>
<p>生成时将会被忽略。</p>
<p>因此可以在此目录下创建_drafts文件夹来存放草稿。</p>
</li>
<li><p>其他非_balabala文件夹/文件</p>
<p>生成时会被拷贝到public中。</p>
<p>除了文章外，还会有图片、标签等用户资源，可以使用<code>hexo new page pilipili</code>来新建子目录<code>pilipili</code>。</p>
<p>比如我的目录下就有categories、pictures、tags等子目录。</p>
</li>
</ol>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>   主题文件夹。<br>   我使用的是Ayer主题，因此在我的themes文件夹下，除了默认主题lanscape外，还有ayer文件夹。</p>
<h3 id="可以考虑的定制"><a href="#可以考虑的定制" class="headerlink" title="可以考虑的定制"></a>可以考虑的定制</h3><h4 id="1-对-config-yml进行修改"><a href="#1-对-config-yml进行修改" class="headerlink" title="1. 对_config.yml进行修改"></a>1. 对_config.yml进行修改</h4><p>   对blog目录下的站点配置文件_config.yml进行个性化修改，具体可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html">配置hexo</a>。</p>
<h5 id="网站Site："><a href="#网站Site：" class="headerlink" title="网站Site："></a>网站Site：</h5><p>我们可以对文件中的site部分进行修改，比如：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction20210418121141.png"></p>
<h5 id="网址URL"><a href="#网址URL" class="headerlink" title="网址URL"></a>网址URL</h5><p>将url改成自己的网站域名，如：<code>http://apollomao.com</code>。</p>
<p>还可以对网址的永久链接格式进行修改，具体可参考<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a></p>
<h4 id="2-对scaffolds文件夹中的模板文件进行修改"><a href="#2-对scaffolds文件夹中的模板文件进行修改" class="headerlink" title="2. 对scaffolds文件夹中的模板文件进行修改"></a>2. 对scaffolds文件夹中的模板文件进行修改</h4><p>所谓模板，即就是预定义，可以在每创建一篇文章后，预定义文章头部，省事。</p>
<p>比如，我的文章模板<code>post.md</code>为：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210418230721.png"></p>
<p>那么我每次<code>hexo new post balabala</code>生成新的文章，该文章的头部就会是：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210418230825.png"></p>
<p>只需要按照需求补充一下tages、categories等值即可：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210418231042.png"></p>
<p>网页模板<code>page.md</code>和草稿模板<code>draft.md</code>也可参考<code>post.md</code>进行设置。创建命令分别是<code>hexo new page balabala</code>和<code>hexo new draft balabala</code>。</p>
<h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>还有一些常见的定制策略，比如加背景、加侧栏菜单、加背景音乐、加404界面等等，部分功能可能主题自带的，其他感兴趣的可以自行搜索~（开头的<a href="https://www.cnblogs.com/shwee/p/11421156.html">参考教程5</a>中包含一些，我没有尝试，仅供参考）</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>图床是可以上传图片的服务器。常用的图床有很多，可以参考开头的<a href="https://www.jianshu.com/p/bff6638e450f">图床工具推荐</a>选择合适的图床和图床工具。</p>
<p>我个人用的是Github + PicGo的组合，因为省钱233</p>
<p>具体安装教程可以参考开头的<a href="https://sunhwee.com/posts/1788dd4a.html">PicGo+GitHub：你的最佳免费图床选择-洪卫</a>。</p>
<p>附上我的PicGo配置仅供参考：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419001244.png"></p>
<p>需要注意的是，与参考教程不同，在配置PicGo阶段，设定分支名需要与Github仓库中<code>Settings</code>–<code>Pages</code>–<code>Source</code>–<code>Branch</code>相对应，而不是统一设master。</p>
<ul>
<li>Note<ul>
<li>PicGo为了稳定期间最好别装测试版。</li>
<li>不要试图装watermark插件，别问我怎么知道的… orz</li>
</ul>
</li>
</ul>
<h1 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h1><p>现在我们来正经发一篇文章。</p>
<h2 id="Markdown基础"><a href="#Markdown基础" class="headerlink" title="Markdown基础"></a>Markdown基础</h2><p>博客文章主要用Markdown编写，有很多写作工具，我个人用的是VSCode。</p>
<p>零基础的同学可以参考<a href="https://zhuanlan.zhihu.com/p/56943330">使用vscode开始Markdown写作之旅</a>进行学习，亲测很好用~</p>
<p>附上其中的基础语法仅供参考：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419002530.png"></p>
<p>等你正式开始写文章的时候，具体一些用法还可以参考<a href="http://itmyhome.com/markdown/index.html">Learning-Markdown (Markdown 入门参考)</a></p>
<ul>
<li>最后再贴出来一个范例：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419003218.png"></p>
<p>这部分除了基础语法，我还用到了插入链接 <code>[title](网址)</code>，以及插入图片 <code>![title](图床地址or本地链接)</code>(直接从PicGo图床里复制就行)。</p>
<h2 id="正经发布一篇文章"><a href="#正经发布一篇文章" class="headerlink" title="正经发布一篇文章"></a>正经发布一篇文章</h2><p>get了最基础的markdown语法后，我们来走一遍完整流程。</p>
<ol>
<li><p>创建一篇文章”博客简介”</p>
<p>在本地blog目录下，右键进入Git Bash，输入：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo new post "博客简介"</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li><p>post是默认值可以省略。</p>
</li>
<li><p>如果title有空格，必须要加双引号，否则双引号可以省略。</p>
</li>
</ul>
</li>
<li><p>编辑文章</p>
<p>在 blog\source_posts 路径下生成了<code>博客简介.md</code>文件，用vscode打开，编辑自己的文章。</p>
<p>比如我的博客简介是这么写的（仅供参考）：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419093855.png"></p>
<ul>
<li><p>可以在文章任意位置添加<code>&lt;!--more--&gt;</code>，首页只会显示more前的内容，more后的内容点击阅读全文后展示。</p>
</li>
<li><p>如果想给文章添加分类和标签，可以在文章头部补充，比如我是这么写的：<br><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419093519.png"></p>
</li>
</ul>
</li>
<li><p>本地预览</p>
<p>写好文章后保存。</p>
<p><code>hexo s</code>启动本地服务器，在 <a href="http://localhost:4000/">http://localhost:4000</a> 进行预览测试。</p>
</li>
<li><p>发布文章<br>Finally!<br>输入以下命令，将写好的“博客简介”发布到网站上吧~</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure>
<p>此时，在浏览器访问自己的博客域名，就可以看到我们写的第一篇正经文章啦~ <span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419101933.png"><br><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/Blogconstruction/Hexo20210419101753.png"></p>
<ul>
<li>附上<a href="https://sunhwee.com/posts/a927e90e.html#toc-heading-5">Markdown Emoji表情语法速查表</a></li>
</ul>
</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Anyway，终于搞完了~</p>
<p>4.12号开始搭，断断续续搞，也遇到了不少bug，4.14才搭的差不多，然后这篇教程又断断续续写了4天 orz</p>
<p>希望能对你有所帮助，欢迎批评指正，爱你ღ( ´･ᴗ･` )</p>
<hr>
<p>阿波罗猫</p>
<p>20210419</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode+Clang+MinGW+OpenGl配置教程</title>
    <url>/VSCode-Clang-MinGW-OpenGl%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天帮别人跑一个天空盒代码，需要用到OpenGl环境，配置过程掉坑比较多略为艰难，因此写个教程记录一下，免得以后换电脑配环境的时候又掉坑233。</p>
<p>顺便吐槽一下，这位仁兄电脑是联想核显，据说因为木有GPU，跑不了OpenGl程序，多好的反面教材<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>~ 这里提醒诸君，搞计算机视觉的话，电脑还是独显比较好。</p>
<p>其实很久以前笔者在CodeBlocks上配置过OpenGl环境，当时用的是袁学长提供的傻瓜教程，私以为so easy……In fact，光是环境配置就要了老命，果然配置教程这种东西要及时记录！</p>
<p><strong>掉坑的核心：64位和32位一定要区分清楚，所有配置必须all32或all64，否则程序会出现<code>skipping imcompatible</code>的问题。</strong></p>
<p><strong>——以下配置都是64bit！</strong></p>
<p>老规矩，附上参考链接，向前辈致敬：<br>|链接|<br>|:—|<br>|1. <a href="https://zhuanlan.zhihu.com/p/87864677">VSCode配置C/C++环境</a>|<br>|2. <a href="https://anyway521.github.io/post/fb46ea0d.html">VSCode配置C/C++环境完整版(附OpenGL配置)</a>|<br>|3. <a href="https://blog.csdn.net/qq_41523096/article/details/104628484">20秒 一键配置 VSCode (Visual Studio Code) C/C++开发环境</a>|<br>|4. <a href="https://my.oschina.net/u/4277479/blog/3525117">VS Code + MinGW + Clang + OpenGL (vscode 配置 opengl环境)</a>|</p>
<h1 id="VSCode配置C-C-环境"><a href="#VSCode配置C-C-环境" class="headerlink" title="VSCode配置C/C++环境"></a>VSCode配置C/C++环境</h1><p>首先，如果你只需要一个在VSCode上的C/C++环境，其他类似OpenGL、OpenCV等等都不需求，那么强烈推荐<a href="https://blog.csdn.net/qq_41523096/article/details/104628484">C参考链接3</a>，全自动傻瓜配置，非常nice。</p>
<p>另外，如果你还没有装VSCode或者想要卸载，推荐<a href="https://zhuanlan.zhihu.com/p/87864677">参考链接1</a>，里面有VSCode的安装教程，在此就不累述了。</p>
<p>那么，正文开始。</p>
<h2 id="1-安装Clang"><a href="#1-安装Clang" class="headerlink" title="1. 安装Clang"></a>1. 安装Clang</h2><p>根据维基百科的定义，Clang是一个编译器前端，采用LLVM（一款用来开发编译器前后端的软件）作为其后端。Clang作为GNU编译器套装（<code>GCC</code>）的替代品，支持GNU编译器的大多数编译设定。Clang支持C、C++、Objective-C和Objective-C++。简单来说，我们安装LLVM等同于安装配置Clang。</p>
<ul>
<li>下载地址：<a href="https://releases.llvm.org/download.html">LLVM</a></li>
</ul>
<p>以LLVM 11.1.0为例：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210427120902.png"><br><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210427121320.png"></p>
<p>笔者的安装位置：<code>D:\Programfiles\LLVM</code>，安装过程中注意勾选：<code>添加环境变量</code></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210427121625.png"></p>
<h2 id="2-安装MinGM-W64"><a href="#2-安装MinGM-W64" class="headerlink" title="2. 安装MinGM-W64"></a>2. 安装MinGM-W64</h2><p>首先我们需要大概了解一下MinGM是个啥。前述的Clang作为GCC的替代品，和GCC一样也是主要用在Unix系统下的，我们想在Windows系统中使用Clang，便需要借助MinGM (Minimalist GNU for Windows)的力量。</p>
<p>MinGM简单来讲，就是Window上的GNU开发平台，等于说有了MinGM你不用装linux也可以在Windows上玩GNU。</p>
<ul>
<li>版本说明：<ul>
<li><p>MinGM（mingm32）—32位；</p>
</li>
<li><p>MinGM-w64—32+64位【我用的是这个】</p>
<p>下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64 - for 32 and 64 bit Window</a></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428111555.png"></p>
</li>
</ul>
</li>
<li><strong>注意：</strong> MinGW是在线安装，但是由于某种不可抗力，安装过程缓慢到不能忍受，因此我最后用的是离线安装的方法。</li>
</ul>
<h3 id="离线安装方法"><a href="#离线安装方法" class="headerlink" title="离线安装方法"></a>离线安装方法</h3><ol>
<li><p>下载X86_64-win32-seh：<br>下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64 - for 32 and 64 bit Windows</a></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428111823.png"></p>
</li>
<li><p>解压、合并文件：将解压后<code>mingw64</code>文件夹中的所有文件直接复制到之前的LLVM安装目录<code>D:\Programfiles\LLVM</code>，系统会自动整合同名文件夹中的文件。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428112733.png"></p>
</li>
<li><p>输入<code>clang -v</code>和<code>gcc -v</code>进行测试，出现版本号则安装成功。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428130609.png"></p>
<p>当前系统的环境变量为：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428131225.png"></p>
</li>
</ol>
<h2 id="3-安装VSCode插件"><a href="#3-安装VSCode插件" class="headerlink" title="3. 安装VSCode插件"></a>3. 安装VSCode插件</h2><p>在VSCode左侧的<code>扩展</code>中搜索安装以下插件：</p>
<p><em>ps，在此之前，建议通过重定向将插件储存位置从C盘改出来:<br><code>"D:\Program Files (x86)\Microsoft VS Code\Code.exe" --extensions-dir "D:\Program Files (x86)\Microsoft VS Code\extensions"</code></em></p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428132711.png"></p>
<ul>
<li><p>插件1：C/C++</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428132109.png"></p>
</li>
<li><p>插件2：C/C++ Clang Command Adapter</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428132325.png"></p>
</li>
<li><p>插件3：Code Runner</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210428132842.png"></p>
</li>
</ul>
<h1 id="VSCode配置Gult环境"><a href="#VSCode配置Gult环境" class="headerlink" title="VSCode配置Gult环境"></a>VSCode配置Gult环境</h1><p>Gult是OpenGl需要的相关依赖，包括<code>glut.h</code>，<code>glut32.lib</code>，<code>glut32.dll</code>文件。</p>
<p>值得注意的是，由于之前的C++环境是64位的，gult版本必须与之对应，即64位。</p>
<ol>
<li><p>下载<code>glut.h</code>，<code>glut32.lib</code>，<code>glut32.dll</code>：</p>
<p>下载地址：<a href="https://pan.baidu.com/s/1PN_0SxxKGJ-D_AZRDa4LDA">https://pan.baidu.com/s/1PN_0SxxKGJ-D_AZRDa4LDA</a> 提取码：sf1z </p>
</li>
<li><p>将gult文件放到相应目录下（LLVM安装路径）：</p>
</li>
</ol>
<ul>
<li><code>gult.h</code>放到目录：<code>D:\Programfiles\LLVM\include</code></li>
<li><code>gult32.dll</code>放到目录：<code>D:\Programfiles\LLVM\bin</code></li>
<li><code>gult32.lib</code>放到目录：<code>D:\Programfiles\LLVM\lib</code></li>
</ul>
<h1 id="VSCode配置文件"><a href="#VSCode配置文件" class="headerlink" title="VSCode配置文件"></a>VSCode配置文件</h1><p>在文件夹里新建<code>.vscode</code>，<code>include</code>和<code>lib</code>文件夹，<code>include</code>和<code>lib</code>现在先不用管，先专注<code>.vscode</code>文件夹，做VSCode下C/C++环境的基本配置。</p>
<p>在<code>.vscode</code>文件夹里新建<code>c_cpp_properties.json</code>，<code>launch.json</code>，<code>settings.json</code>以及<code>tasks.json</code>。</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210430102555.png"></p>
<h2 id="1-配置编译器：c-cpp-properties-json"><a href="#1-配置编译器：c-cpp-properties-json" class="headerlink" title="1. 配置编译器：c_cpp_properties.json"></a>1. 配置编译器：c_cpp_properties.json</h2><p>首先配置编译器路径。</p>
<h3 id="方法-1："><a href="#方法-1：" class="headerlink" title="方法 1："></a>方法 1：</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"MinGW"</span>,</span><br><span class="line">            <span class="string">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span>,</span><br><span class="line">            <span class="string">"compilerPath"</span>: <span class="string">"D:/Programfiles/LLVM/bin/g++.exe"</span>, <span class="comment">//之前安装的编译器的路径</span></span><br><span class="line">            <span class="string">"includePath"</span>: [</span><br><span class="line">                <span class="string">"${workspaceFolder}/**"</span>,</span><br><span class="line">                <span class="string">"${workspaceFolder}/include/*"</span>, <span class="comment">//当前文件夹下的include</span></span><br><span class="line">                <span class="string">"D:/Programfiles/LLVM/include/*"</span>, <span class="comment">//LLVM的include</span></span><br><span class="line">                <span class="string">"D:/Programfiles/LLVM/lib/gcc/x86_64-w64-mingw32/8.1.0/include/*"</span> <span class="comment">//mingw的include</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"defines"</span>: [],</span><br><span class="line">            <span class="string">"browse"</span>: {</span><br><span class="line">                <span class="string">"path"</span>: [</span><br><span class="line">                    <span class="string">"${workspaceFolder}"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"databaseFilename"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="string">"cppStandard"</span>: <span class="string">"c++17"</span></span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"version"</span>: <span class="number">4</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="方法-2："><a href="#方法-2：" class="headerlink" title="方法 2："></a>方法 2：</h3><p><a href="https://zhuanlan.zhihu.com/p/87864677">参考链接1</a>中<code>配置编译器</code>部分给出了另一种图形化的配置方式。</p>
<p>简单来说就是不需要手动新建<code>.vscode</code>文件夹和<code>c_cpp_properties.json</code>文件，直接用<code>Ctrl+Shift+P</code>调出控制面板，输入<code>C/C++</code>选择<code>Edit Configurations(UI)</code>进入配置。</p>
<ul>
<li><p>修改编译器路径：D:/Programfiles/LLVM/bin/g++.exe</p>
</li>
<li><p>修改intelliSense：clang-x64</p>
</li>
</ul>
<p>配置完成后，自动新建了<code>.vscode</code>文件夹和<code>c_cpp_properties.json</code>文件，再在<code>c_cpp_properties</code>文件中修改include路径即可。</p>
<h2 id="2-配置构建任务tasks-json"><a href="#2-配置构建任务tasks-json" class="headerlink" title="2. 配置构建任务tasks.json"></a>2. 配置构建任务tasks.json</h2><p><code>tasks.json</code>可以告诉VSCode如何编译程序。</p>
<h3 id="方法-1：-1"><a href="#方法-1：-1" class="headerlink" title="方法 1："></a>方法 1：</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">{</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="string">"tasks"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"label"</span>: <span class="string">"Compile"</span>, <span class="comment">// 任务名称，与launch.json的preLaunchTask相对应</span></span><br><span class="line">            <span class="string">"command"</span>: <span class="string">"clang++"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [ <span class="comment">//编译时的参数</span></span><br><span class="line">                <span class="string">"${file}"</span>,</span><br><span class="line">                <span class="string">"-o"</span>, <span class="comment">//指定输出文件名</span></span><br><span class="line">                <span class="string">"${fileDirname}/${fileBasenameNoExtension}.exe"</span>,</span><br><span class="line">                <span class="string">"-g"</span>, <span class="comment">//添加gdb调试选项</span></span><br><span class="line">                <span class="string">"-Wall"</span>,  <span class="comment">//开启额外警告</span></span><br><span class="line">                <span class="string">"-static-libgcc"</span>, <span class="comment">//静态链接libgcc</span></span><br><span class="line">                <span class="string">"--target=x86_64-w64-mingw"</span>,  <span class="comment">//clang编译器需要加上这条，因为它默认的target是msvc；如果用gcc或者linux要注释掉</span></span><br><span class="line">                <span class="string">"-std=c++17"</span>,</span><br><span class="line">                <span class="string">"-I${workspaceFolder}/include"</span>, <span class="comment">//添加工作路径下的include</span></span><br><span class="line">                <span class="string">"-L${workspaceFolder}/lib"</span>, <span class="comment">//添加工作路径下的lib</span></span><br><span class="line">                <span class="string">"-lglut32"</span>, <span class="comment">//使用glut</span></span><br><span class="line">                <span class="string">"-lglu32"</span>,  <span class="comment">//使用glut</span></span><br><span class="line">                <span class="string">"-lopengl32"</span>, <span class="comment">//使用opengl</span></span><br><span class="line">                <span class="string">"-lglad"</span>, <span class="comment">//使用glad+glfw，这里可以先注释掉</span></span><br><span class="line">                <span class="string">"-lglfw3"</span>,  <span class="comment">//使用glad+glfw，这里可以先注释掉 </span></span><br><span class="line">                <span class="string">"-lglfw3dll"</span>, <span class="comment">//使用glad+glfw，这里可以先注释掉</span></span><br><span class="line">                <span class="string">"-lgdi32"</span>,  <span class="comment">//使用glad+glfw，这里可以先注释掉</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="string">"group"</span>: {</span><br><span class="line">                <span class="string">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="string">"isDefault"</span>: <span class="literal">true</span> <span class="comment">//表示快捷键Ctrl+Shift+B可以运行该任务</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"presentation"</span>: {</span><br><span class="line">                <span class="string">"echo"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"reveal"</span>: <span class="string">"always"</span>, <span class="comment">// 执行任务时是否跳转到终端面板</span></span><br><span class="line">                <span class="string">"focus"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"panel"</span>: <span class="string">"shared"</span> <span class="comment">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"problemMatcher"</span>: []</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="方法-2：-1"><a href="#方法-2：-1" class="headerlink" title="方法 2："></a>方法 2：</h3><p><a href="https://zhuanlan.zhihu.com/p/87864677">参考链接1</a>中<code>配置构建任务</code>部分给出了另一种图形化的配置方式。</p>
<p>不需要手动新建<code>tasks.json</code>文件，直接用<code>Ctrl+Shift+P</code>调出控制面板，输入<code>tasks</code>选择<code>Tasks:Configure Default Build Task</code>，自动生成tasks.json文件，主要修改其中的<code>"args"</code>参数部分。</p>
<h2 id="配置调试设置launch-json"><a href="#配置调试设置launch-json" class="headerlink" title="配置调试设置launch.json"></a>配置调试设置launch.json</h2><p><code>launch.json</code>用来配置调试的相关信息。</p>
<h3 id="方法-1：-2"><a href="#方法-1：-2" class="headerlink" title="方法 1："></a>方法 1：</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"(gdb) Launch"</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"cppdbg"</span>, <span class="comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span></span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>, <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"${fileDirname}/${fileBasenameNoExtension}.exe"</span>, <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="string">"args"</span>: [], <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span></span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="literal">false</span>, <span class="comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span></span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"${workspaceFolder}"</span>, <span class="comment">// 调试程序时的工作目录，此为工作区文件夹；改成${fileDirname}可变为文件所在目录</span></span><br><span class="line">            <span class="string">"environment"</span>: [], <span class="comment">// 环境变量</span></span><br><span class="line">            <span class="string">"externalConsole"</span>: <span class="literal">false</span>, <span class="comment">// 为true时使用单独的cmd窗口，与其它IDE一致；18年10月后设为false可调用VSC内置终端</span></span><br><span class="line">            <span class="string">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span>, <span class="comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span></span><br><span class="line">            <span class="string">"MIMode"</span>: <span class="string">"gdb"</span>, <span class="comment">// 指定连接的调试器，可以为gdb或lldb。但我没试过lldb</span></span><br><span class="line">            <span class="string">"miDebuggerPath"</span>: <span class="string">"gdb.exe"</span>, <span class="comment">// 调试器路径，Windows下后缀不能省略，Linux下则不要</span></span><br><span class="line">            <span class="string">"setupCommands"</span>: [</span><br><span class="line">                { <span class="comment">// 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google</span></span><br><span class="line">                    <span class="string">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="string">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="string">"ignoreFailures"</span>: <span class="literal">false</span></span><br><span class="line">                }</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"Compile"</span> <span class="comment">// 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="方法-2：-2"><a href="#方法-2：-2" class="headerlink" title="方法 2："></a>方法 2：</h3><p>菜单栏<code>运行</code>-<code>启动调试</code>-<code>C++(GDB/LLDB)</code>，自动生成一个<code>launch.json</code>文件，再根据需要修改相关配置。</p>
<p>ps，不推荐该方法，原博主也遇到了没解决的问题，笔者也没深究，还是建议方法1。</p>
<h2 id="配置用户设置settings-json"><a href="#配置用户设置settings-json" class="headerlink" title="配置用户设置settings.json"></a>配置用户设置settings.json</h2><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"files.defaultLanguage"</span>: <span class="string">"cpp"</span>, <span class="comment">// ctrl+N新建文件后默认的语言</span></span><br><span class="line">  <span class="string">"editor.formatOnType"</span>: <span class="literal">true</span>, <span class="comment">// 输入时就进行格式化，默认触发字符较少，分号可以触发</span></span><br><span class="line">  <span class="string">"editor.snippetSuggestions"</span>: <span class="string">"top"</span>, <span class="comment">// snippets代码优先显示补全</span></span><br><span class="line">  <span class="string">"code-runner.runInTerminal"</span>: <span class="literal">true</span>, <span class="comment">// 设置成false会在“输出”中输出，无法输入</span></span><br><span class="line">  <span class="string">"code-runner.executorMap"</span>: {</span><br><span class="line">      <span class="string">"c"</span>: <span class="string">"cd $dir &amp;&amp; clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 &amp;&amp; $dir$fileNameWithoutExt"</span>,</span><br><span class="line">      <span class="string">"cpp"</span>: <span class="string">"cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -lglut32 -lglu32 -lopengl32 -std=c++17 &amp;&amp; $dir$fileNameWithoutExt"</span> </span><br><span class="line">  }, <span class="comment">// 设置code runner的命令行</span></span><br><span class="line">  <span class="string">"code-runner.saveFileBeforeRun"</span>: <span class="literal">true</span>, <span class="comment">// run code前保存</span></span><br><span class="line">  <span class="string">"code-runner.preserveFocus"</span>: <span class="literal">true</span>, <span class="comment">// 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false</span></span><br><span class="line">  <span class="string">"code-runner.clearPreviousOutput"</span>: <span class="literal">false</span>, <span class="comment">// 每次run code前清空属于code runner的终端消息</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"C_Cpp.clang_format_sortIncludes"</span>: <span class="literal">true</span>, <span class="comment">// 格式化时调整include的顺序（按字母排序）</span></span><br><span class="line">  <span class="string">"C_Cpp.intelliSenseEngine"</span>: <span class="string">"Default"</span>, <span class="comment">// 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档</span></span><br><span class="line">  <span class="string">"C_Cpp.errorSquiggles"</span>: <span class="string">"Disabled"</span>, <span class="comment">// 因为有clang的lint，所以关掉</span></span><br><span class="line">  <span class="string">"C_Cpp.autocomplete"</span>: <span class="string">"Disabled"</span>, <span class="comment">// 因为有clang的补全，所以关掉</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"clang.cflags"</span>: [ <span class="comment">// 控制c语言静态检测的参数</span></span><br><span class="line">      <span class="string">"--target=x86_64-w64-mingw"</span>,</span><br><span class="line">      <span class="string">"-std=c11"</span>,</span><br><span class="line">      <span class="string">"-Wall"</span>,</span><br><span class="line">      <span class="string">"-I./include"</span>,</span><br><span class="line">      <span class="string">"-L./lib"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"clang.cxxflags"</span>: [ <span class="comment">// 控制c++静态检测时的参数</span></span><br><span class="line">      <span class="string">"--target=x86_64-w64-mingw"</span>,</span><br><span class="line">      <span class="string">"-std=c++17"</span>,</span><br><span class="line">      <span class="string">"-Wall"</span>,</span><br><span class="line">      <span class="string">"-I./include"</span>,</span><br><span class="line">      <span class="string">"-L./lib"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"clang.completion.enable"</span>:<span class="literal">true</span>, <span class="comment">// 效果效果比cpptools要好</span></span><br><span class="line">  <span class="string">"clang.diagnostic.delay"</span>:<span class="number">300</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>值得注意的是</strong>，之前我run code一直报错找不到一些glut函数定义，只有debug能跑。后来发现问题出在<code>code-runner.executorMap</code>这里。</p>
<p>之前<code>tasks.json</code>中调试参数部分为：<br><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210430124111.png"></p>
<p>而<code>settings.json</code>的<code>code-runner.executorMap</code>部分需要与之对应：<br><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210430124608.png"></p>
<p>加上红框部分就能run code了。</p>
<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>至此VSCode配置结束，之后跑新的C++项目只需要将<code>.vscode</code>文件夹复制过去就行，如果要用到其他库，只需要对其中一些参数稍作修改。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>最后，我们建个main.cpp来测试一下：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glut.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>{</span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line">    <span class="built_in">glutInitWindowPosition</span>(<span class="number">800</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(<span class="string">"OpenGL 3D View"</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(display);</span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_PROJECTION);</span><br><span class="line">    <span class="built_in">glOrtho</span>(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_MODELVIEW);</span><br><span class="line">    <span class="built_in">gluLookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="built_in">glColor3f</span>(<span class="number">0</span>, <span class="number">1.0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">glutWireTeapot</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glFlush</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>run code：</p>
<p><img src="https://raw.githubusercontent.com/OrderAngel/Picture/main/blog_files/img/Pic-Github/OpenGLconfig/20210430121933.png"></p>
<p>大功告成！<span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>~</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>emm，没啥好说的啦，干的不错喵喵喵~</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>OpenGl</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
</search>
